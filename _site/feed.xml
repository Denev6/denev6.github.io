

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://denev6.github.io/</id>
  <title>Jin's Notes</title>
  <subtitle>AI, 수학, Python, Golang을 다루는 학생입니다.</subtitle>
  <updated>2025-02-01T15:36:45+09:00</updated>
  <author>
    <name>박성진</name>
    <uri>https://denev6.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://denev6.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko-KR"
    href="https://denev6.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator>
  <rights> © 2025 박성진 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>ImageNet Classification with Deep Convolutional Neural Networks</title>
    <link href="https://denev6.github.io/paper-review/2025/01/31/alexnet.html" rel="alternate" type="text/html" title="ImageNet Classification with Deep Convolutional Neural Networks" />
    <published>2025-01-31T00:00:00+09:00</published>
  
    <updated>2025-01-31T00:00:00+09:00</updated>
  
    <id>https://denev6.github.io/paper-review/2025/01/31/alexnet.html</id>
    <content src="https://denev6.github.io/paper-review/2025/01/31/alexnet.html" />
    <author>
      <name>박성진</name>
    </author>

  
    
    <category term="Paper-Review" />
    
  

  
    <summary>
      





      ImageNet Classification with Deep Convolutional Neural Networks: 논문은 AlexNet을 소개한 논문으로 CNN 모델의 각 레이어가 어떤 역할을 하는지 잘 분석했다.

논문을 정리한 글이며, CNN의 기본적인 개념을 생략하고 정리했다. 자세한 부분은 BLOG: CNN에 볼 수 있다.

Abstract


  ImageNet LSVRC-2012 대회에서 SOTA를 달성
  모델은 6000만 개의 파라미터와 650,000개 뉴런으로 구성
  5개의 convolutional layer + 3개의 fully-connected layer + 1000-way softmax
  non-saturating activation과 효율적인 GPU 연산을 통한 빠른 학습
...
    </summary>
  

  </entry>

  
  <entry>
    <title>Auto-Encoding Variational Bayes</title>
    <link href="https://denev6.github.io/computer-vision/2025/01/29/vae.html" rel="alternate" type="text/html" title="Auto-Encoding Variational Bayes" />
    <published>2025-01-29T00:00:00+09:00</published>
  
    <updated>2025-01-31T00:18:46+09:00</updated>
  
    <id>https://denev6.github.io/computer-vision/2025/01/29/vae.html</id>
    <content src="https://denev6.github.io/computer-vision/2025/01/29/vae.html" />
    <author>
      <name>박성진</name>
    </author>

  
    
    <category term="Computer-Vision" />
    
  

  
    <summary>
      





      Auto Encoder

Variational Auto-Encoding을 이해하기 위해 기본적인 Auto-Encoding을 알아야 한다.



Auto Encoder(AE)는 데이터를 압축하고 복원하는 단순한 모델이다. Linear layer을 통해 데이터 크기를 줄이고 복원한다. Auto Encoder 구성은 다음과 같다.


  Encoder: 데이터를 압축하는 신경망 (파란 부분)
  latent variable: 데이터가 압축된 벡터
  Decoder: 데이터를 복원하는 신경망 (초록 부분)


다른 표현으로 Encoder를 Recognition model, Decoder를 Reconstruction model이라고 부른다.

class Autoencoder(nn.Module):
    def ...
    </summary>
  

  </entry>

  
  <entry>
    <title>Histograms of Oriented Gradients for Human Detection</title>
    <link href="https://denev6.github.io/paper-review/2025/01/27/hog.html" rel="alternate" type="text/html" title="Histograms of Oriented Gradients for Human Detection" />
    <published>2025-01-27T00:00:00+09:00</published>
  
    <updated>2025-01-27T00:00:00+09:00</updated>
  
    <id>https://denev6.github.io/paper-review/2025/01/27/hog.html</id>
    <content src="https://denev6.github.io/paper-review/2025/01/27/hog.html" />
    <author>
      <name>박성진</name>
    </author>

  
    
    <category term="Paper-Review" />
    
  

  
    <summary>
      





      Histograms of Oriented Gradients for Human Detection(vision.stanford) 논문을 바탕으로 HOG descriptor 작동 원리에 대해 분석한다. 논문을 완전히 번역하는 것이 아닌 내용을 분석하고 정리한 글이다. 따라서 실제 논문 목차와 다르며, 필자의 설명이 추가되었다.

본 글에서 gradient는 이미지의 x 또는 y 방향에 대한 미분값을 말하며, 자세한 내용은 블로그: edge-detection에서 정의했다. SVM도 블로그: svm에서 다뤘었다.

초록

본 연구는 Linear SVM을 이용한 사람 검출 모델을 개발했다. 이미지 gradient를 이용해 경계(edge)를 탐지하는 Histograms of Oriented Gradient(HOG)...
    </summary>
  

  </entry>

  
  <entry>
    <title>FastAPI 기반 딥러닝 모델 API 구축하기</title>
    <link href="https://denev6.github.io/playground/2025/01/17/ml-api.html" rel="alternate" type="text/html" title="FastAPI 기반 딥러닝 모델 API 구축하기" />
    <published>2025-01-17T00:00:00+09:00</published>
  
    <updated>2025-01-28T23:37:47+09:00</updated>
  
    <id>https://denev6.github.io/playground/2025/01/17/ml-api.html</id>
    <content src="https://denev6.github.io/playground/2025/01/17/ml-api.html" />
    <author>
      <name>박성진</name>
    </author>

  
    
    <category term="Playground" />
    
  

  
    <summary>
      





      항상 공부를 하면서 궁금한 점이 있었다. 내가 만드는 기술이 사용자에게 닿기까지 어떤 과정이 있을까? 머신러닝 모델을 공부하면서도 같은 의문이 들었다. 그래서 이미지 파일을 받아 딥러닝 모델로 예측하는 API를 만들어 보았다.

Github: deep-learning-codes/ML-Ops

Model 학습

모델과 데이터셋을 고르는 기준은 단순하다. 로컬에서 가볍게 돌릴 수 있어야 한다. 지금은 모델이 중요한 게 아니라 그럴싸한 API를 만드는 것이 목표이기 때문에 성능보다 속도를 우선시했다. 데이터셋은 가벼운 Fashion MNIST를 사용했다. 28 x 28의 작은 크기 덕분에 빠르게 학습할 수 있다.

참고로 Fashion MNIST는 부츠, 운동화, 티셔츠, 가방 등 의류 이미지로 구성된 데이...
    </summary>
  

  </entry>

  
  <entry>
    <title>SVD를 이용한 이미지 압축</title>
    <link href="https://denev6.github.io/computer-vision/2025/01/08/svd.html" rel="alternate" type="text/html" title="SVD를 이용한 이미지 압축" />
    <published>2025-01-08T00:00:00+09:00</published>
  
    <updated>2025-01-08T00:00:00+09:00</updated>
  
    <id>https://denev6.github.io/computer-vision/2025/01/08/svd.html</id>
    <content src="https://denev6.github.io/computer-vision/2025/01/08/svd.html" />
    <author>
      <name>박성진</name>
    </author>

  
    
    <category term="Computer-Vision" />
    
  

  
    <summary>
      





      SVD: Singular Vector Decomposition에 대해 다룬다. 각 수식이 어떤 의미를 가지고, 이미지 압축에 어떻게 사용되는지 설명한다. 본 글을 이해하기 위해 아래 개념을 숙지하고 있어야 한다.

Vector: 크기와 방향을 가지는 양으로, 2차원 공간의 벡터는 $\vec{v}=\begin{bmatrix}u_1 &amp;amp; u_2\end{bmatrix}$와 같이 표현한다. 본문에서는 편의상 $v$ 형태로 표기한다.

Inversed matrix: $A$에 대한 역행렬로 $A^{-1}$로 표기하며, $A^{-1}A=I$라는 특징을 가진다.

Orthogonal matrix: 모든 column 벡터가 직교하는 행렬로, $AA^T=A^TA=I$라는 특징을 가진다. 동시에 $A^T=A^{-1}...
    </summary>
  

  </entry>

</feed>


